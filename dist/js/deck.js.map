{"version":3,"sources":["deck.js"],"names":["Deck","deckSize","DEFAULT_DECK_SIZE","create","cards","SUITS","forEach","suit","RANKS","rank","push","Card","match","firstVal","secVal","console","log","m","length","t","i","Math","floor","random","numCards","returnCards","pop"],"mappings":";;;;;;;;;;IAAMA,I;AAImB;AACkB;AACvC,gBAAYC,QAAZ,EAAsB;AAAA;;AAAA,+CALF,EAKE;;AAAA,sCAJX,IAIW;;AAAA,mCAFd,CAAC,IAAD,EAAO,IAAP,CAEc;;AAAA,mCADd,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CACc;;AAClB,SAAKA,QAAL,GAAgBA,QAAQ,GAAGA,QAAH,GAAc,KAAKC,iBAA3C;AAEA,SAAKC,MAAL,GAHkB,CAKlB;AACA;AACH;;;;WAED,kBAAQ;AAAA;;AAEJ,WAAKC,KAAL,GAAa,EAAb;AACA,WAAKC,KAAL,CAAWC,OAAX,CAAmB,UAACC,IAAD,EAAU;AACzB,QAAA,KAAI,CAACC,KAAL,CAAWF,OAAX,CAAmB,UAACG,IAAD,EAAU;AACzB,UAAA,KAAI,CAACL,KAAL,CAAWM,IAAX,CAAiB,IAAIC,IAAJ,CAASJ,IAAT,EAAeE,IAAf,CAAjB;AACH,SAFD;AAGH,OAJD;AAKH;;;;;;;;;;;;;MAED,YAAO;AACH,WAAKG,KAAL,GAAa,CACT,KAAKC,QADI,EAET,KAAKC,MAFI,CAAb;AAIAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AAEH,K;;;WAED,iBAAQ;AACJ,WAAKT,MAAL;AAEH;;;WAED,mBAAS;AACL,UAAIc,CAAC,GAAG,KAAKb,KAAL,CAAWc,MAAnB;AAAA,UAA2BC,CAA3B;AAAA,UAA8BC,CAA9B,CADK,CAGL;;AACA,aAAOH,CAAP,EAAU;AAEN;AACAG,QAAAA,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,CAAC,EAA5B,CAAJ,CAHM,CAKN;;AACAE,QAAAA,CAAC,GAAG,KAAKf,KAAL,CAAWa,CAAX,CAAJ;AACA,aAAKb,KAAL,CAAWa,CAAX,IAAgB,KAAKb,KAAL,CAAWgB,CAAX,CAAhB;AACA,aAAKhB,KAAL,CAAWgB,CAAX,IAAgBD,CAAhB;AACH,OAbI,CAeL;AACA;;AACH;;;WAED,cAAKK,QAAL,EAAe;AACX,UAAIC,WAAW,GAAG,EAAlB;;AACA,WAAI,IAAIL,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGI,QAAnB,EAA6BJ,CAAC,EAA9B,EAAiC;AAC7BK,QAAAA,WAAW,CAACf,IAAZ,CAAiB,KAAKN,KAAL,CAAWsB,GAAX,EAAjB;AACH;;AAED,aAAOD,WAAP;AACH;;;;;;AAKL,IAAIzB,IAAJ","sourcesContent":["class Deck {\r\n    DEFAULT_DECK_SIZE = 52\r\n    deckSize = null\r\n\r\n    SUITS = ['🖤', '♣️'] //'♠️', '♦️']\r\n    RANKS = [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\"] //, \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"]\r\n    constructor(deckSize) {\r\n        this.deckSize = deckSize ? deckSize : this.DEFAULT_DECK_SIZE\r\n\r\n        this.create()\r\n\r\n        // this.shuffle()\r\n        // this.showAll()\r\n    }\r\n\r\n    create(){\r\n\r\n        this.cards = []\r\n        this.SUITS.forEach((suit) => {\r\n            this.RANKS.forEach((rank) => {\r\n                this.cards.push (new Card(suit, rank))\r\n            })\r\n        })\r\n    }\r\n\r\n    match(){\r\n        this.match = [\r\n            this.firstVal,\r\n            this.secVal\r\n        ]\r\n        console.log(match)\r\n\r\n    }\r\n\r\n    reset() {\r\n        this.create()\r\n\r\n    }\r\n\r\n    shuffle(){\r\n        var m = this.cards.length, t, i;\r\n        \r\n        // While there remain elements to shuffle…\r\n        while (m) {\r\n        \r\n            // Pick a remaining element…\r\n            i = Math.floor(Math.random() * m--);\r\n        \r\n            // And swap it with the current element.\r\n            t = this.cards[m];\r\n            this.cards[m] = this.cards[i];\r\n            this.cards[i] = t;\r\n        }\r\n        \r\n        //optional return just incase it helps somewhere in the game or app\r\n        // return this.cards;\r\n    }\r\n\r\n    deal(numCards) {\r\n        let returnCards = []\r\n        for(var i = 0; i < numCards; i++){\r\n            returnCards.push(this.cards.pop())\r\n        }\r\n        \r\n        return returnCards\r\n    }\r\n\r\n\r\n}\r\n\r\nnew Deck()"],"file":"deck.js"}